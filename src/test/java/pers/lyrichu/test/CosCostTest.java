package pers.lyrichu.test;

public class CosCostTest {

  private static final String ITEM_EMBEDDING = "0.0285918,0.026586,-0.0686612,-0.079078,-0.0991434,-0.33125,-0.00305211,-0.0744025,-0.00359165,0.0729703,0.0311811,-0.0591196,0.224534,0.0393599,0.0080706,-0.0158899,-0.00885367,-0.0336455,0.0574453,-0.0219957,0.0140191,-0.0415462,-0.0421359,-0.00308944,-0.070481,-0.0856701,0.0455884,0.0563013,0.0234451,-0.0352611,-0.0250644,-0.0303092,-0.120676,0.0723812,0.0155466,0.0643704,0.0711218,-0.00998693,-0.0888861,0.0640068,-0.0173278,-0.123725,0.00706451,-0.00119094,-0.0131869,-0.331907,-0.0886383,-0.0147081,0.0946379,0.00135689,0.130308,0.00855494,-0.00286959,0.0600233,0.0129741,-0.011451,-0.391386,0.00987014,-0.0513723,-0.0115354,-0.0398349,0.0632127,-0.2337,0.00176223,-0.132739,0.0733457,0.0738498,-0.204895,-0.282691,-0.0183928,-0.00532627,-0.0962141,0.0347814,0.0471879,0.0233607,-0.305519,-0.0246987,0.0509772,-0.0612819,0.00273897,-0.0654437,-0.587284,-0.0972061,-0.0481591,-0.060077,-0.0512421,-0.0346974,-0.0523365,-0.0280014,0.00398475,-0.0106047,0.0366602,-0.195539,-0.064113,-0.408592,0.0259246,-0.0505577,-0.0845765,0.0504461,-0.10235,-0.00341747,-0.0154693,0.00984947,-0.0409083,-0.0716316,0.0863887,0.0605551,-0.0338206,0.0133774,0.0334489,-0.0560752,0.0424509,-0.00196421,-0.0589938,0.131066,-0.083291,0.0170657,0.0188254,0.00406341,-0.170429,0.0392369,-0.10725,-0.262304,0.0428029,0.0570433,-0.170585,-0.0597117,0.0652504,0.0262024,0.00675236,-0.0181422,-0.00379186,-0.0158558,0.000992555,-0.0466123,-0.0406841,-0.00578297,-0.0648915,-0.00274587,0.126016,0.021198,-0.0104248,-0.00730395,0.0493846,0.053487,-0.106779,0.00841878,-0.0363881,0.0886209,0.00136167,0.071388,-0.156111,-0.0243999,0.0637523,0.151127,-0.557553,0.0122145,-0.047561,0.0354811,-0.0837208,-0.103248,-0.134647,-0.0464943,-0.112994,0.0723184,0.122411,-0.00891992,-0.0376965,0.0594868,0.054625,-0.220885,-0.0943734,-0.144864,0.108323,-0.122219,-0.0367213,0.117243,0.0756315,0.0203458,0.0123537,-0.301906,0.000336837,-0.15419,-0.0635438,-0.207825,-0.0274194,-0.0500831,0.0201919,0.102687,-0.0725458,-0.000337233,-0.0235281,0.0216347,-0.0386225,-0.0157941,-0.0403657,0.0212785,-0.146924,0.00400941,-0.113751,0.0204305,-0.0846936,-0.0369791,-0.169816,0.0392018,-0.0310826,-0.0464252,-0.0769734,-0.17627,0.0100743,0.0366803,-0.0311251,0.0617151,-0.00464632,-0.0587047,-0.0134852,0.00450738,-0.0556511,-0.0492873,-0.313466,0.0516618,0.0831382,0.051832,0.000269915,-0.295573,0.0151104,0.109959,0.0280214,-0.0309737,-0.0415511,-0.20521,-0.0774774,-0.0739771,-0.0297321,-0.0993249,0.0231514,-0.0545161,-0.0296029,0.0407756,-0.110017,0.062238,-0.056823,0.0859877,-0.0433867,-0.0543917,-0.189082,0.0390871,0.101793,0.0118303,0.00681736,0.0225951,0.00985428,-0.326814,-0.168562,-0.015484,-0.131369";
  private static final String USER_EMBEDDING = "0:3.29813,1:6.0625,2:1.23015,3:0.64394,4:3.24465,6:5.16181,8:8.44952,9:0.773791,10:2.03167,13:3.50339,14:2.35116,15:1.45767,16:6.02321,17:0.213352,19:1.85312,20:1.2641,23:5.09301,24:1.46841,25:2.76299,27:0.0533266,28:3.11894,29:6.69949,30:4.94165,31:5.22931,33:0.60406,34:0.937247,35:3.98388,36:4.53878,40:3.55256,42:4.8609,43:6.31419,46:0.659525,47:1.36205,48:2.94337,49:5.50014,50:0.282428,51:3.23162,52:2.54544,54:1.76579,55:2.92376,58:6.15306,62:2.18982,64:0.0122409,68:1.38747,69:6.90219,70:7.99628,72:4.62237,73:1.57253,75:1.72535,76:2.81076,77:4.40121,78:1.50349,79:0.973568,81:0.642955,82:2.44092,83:6.23577,84:0.0582068,85:0.108483,86:5.27184,88:4.81905,89:1.01517,90:1.2063,92:1.28854,94:2.70122,95:2.83402,97:0.674098,99:6.23962,101:4.34811,102:7.36304,104:3.05111,105:3.44537,106:7.61846,108:4.5199,109:5.14697,110:7.37697,112:1.61051,113:2.78334,114:0.886877,115:2.7384,116:1.60039,117:9.56966,118:1.13823,120:1.78566,122:2.32453,123:5.10596,124:0.140953,126:1.40178,127:6.63051,129:3.74005,130:5.11075,131:5.19314,132:2.53263,133:2.47648,134:1.04187,135:9.37797,136:4.99279,137:0.512641,138:7.73756,140:2.9853,142:6.13858,144:1.55023,145:1.02642,146:6.26771,147:5.28362,148:5.3745,149:7.14473,150:0.204254,152:0.849994,153:1.64809,156:3.00944,158:0.804655,159:0.174133,161:4.27834,162:6.12067,163:2.8444,164:9.57116,168:6.94243,169:0.977139,170:7.44142,174:5.76941,175:7.4143,177:5.98977,179:0.852606,180:0.327728,184:2.2089,185:2.79162,187:3.55741,189:3.80778,190:0.569295,191:5.1633,193:4.80792,194:2.21942,196:5.2041,199:0.121752,200:7.81031,201:3.65868,202:4.08122,204:6.11739,205:5.93388,206:0.524,207:0.696445,209:1.23976,211:0.900574,213:5.3159,214:5.92443,217:4.91074,218:2.61313,220:2.49017,221:3.7181,223:7.19647,228:6.05497,229:1.85684,230:0.949275,231:2.80326,234:3.00822,236:1.4151,238:4.85715,239:3.95242,243:0.866606,246:2.93124,247:1.09399,249:3.96719,250:1.70652,252:2.57219,254:5.82945,255:2.9423";
  private static final int EMBEDDING_SIZE = 256;
  private static final double EPSILON = 1e-6;


  public static void main(String[] args) {
    long start = System.currentTimeMillis();
    int n = 200;
    double score = 0;
    for (int i = 0;i < n;i++) {
      score = getYtbDnnEmbeddingScore(USER_EMBEDDING,ITEM_EMBEDDING);
    }
    long cost = System.currentTimeMillis() - start;
    System.out.println("score:" + score);
    float avgCost = (float) cost / n;
    System.out.println("n = " + n);
    System.out.println("total cost " + cost);
    System.out.println("avg cost " + avgCost);
  }

  private static double getYtbDnnEmbeddingScore(String userEmbedding,String queryEmbedding) {
    double score = 1;
    try {
      // userEmbedding 是稀疏编码的,queryEmbedding 以逗号分隔
      double[] userEmbeddingVec = new double[EMBEDDING_SIZE];
      double[] queryEmbeddingVec = new double[EMBEDDING_SIZE];
      for (int i = 0;i < EMBEDDING_SIZE;i++) {
        userEmbeddingVec[i] = 0;
        queryEmbeddingVec[i] = 0;
      }
      String[] userSplits = userEmbedding.split(",");
      String[] querySplits = queryEmbedding.split(",");
      if (querySplits.length != EMBEDDING_SIZE) {
        return score;
      }
      for (String s: userSplits) {
        String[] tmpSplits = s.split(":");
        int index = Integer.valueOf(tmpSplits[0]);
        double v = Double.valueOf(tmpSplits[1]);
        userEmbeddingVec[index] = v;
      }
      for (int i = 0;i < querySplits.length;i++) {
        queryEmbeddingVec[i] = Double.valueOf(querySplits[i]);
      }
      double cosSim = calVecsCosSim(userEmbeddingVec,queryEmbeddingVec);
      // 从 [-1,1] 映射到 [0,2],并且 加上一个很小的正数 确保不为0
      double simScore = cosSim + 1 + EPSILON;
      score = simScore;
    } catch (Exception e) {
      System.err.println("getYtbDnnEmbeddingScore error:" + e);
    }
    return score;
  }

  /**
   * 计算两个向量的余弦相似度
   * 返回值在 [-1,1]之间
   */
  private static double calVecsCosSim(double[] vec1,double[] vec2) {
    int n = vec1.length;
    double dotSum = 0; // 点积之和
    double squareSum1 = 0;
    double squareSum2 = 0;
    for (int i = 0;i < n;i++) {
      double v1 = vec1[i];
      double v2 = vec2[i];
      dotSum += v1 * v2;
      squareSum1 += v1 * v1;
      squareSum2 += v2 * v2;
    }
    return dotSum / Math.sqrt(squareSum1 * squareSum2);
  }

}
